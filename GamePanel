/* GamePanel class acts as the main "game loop" - continuously runs the game and calls whatever needs to be called

Child of JPanel because JPanel contains methods for drawing to the screen

Implements KeyListener interface to listen for keyboard input

Implements Runnable interface to use "threading" - let the game do two things at once

*/
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Random;


public class GamePanel extends JPanel implements Runnable, KeyListener {

	// dimensions of window
	public static final int GAME_WIDTH = 1250;
	public static final int GAME_HEIGHT = 750;

	public Thread gameThread;
	public Image image;
	public Graphics graphics;

	public ScoreClass score;
	public Menu mainMenu = new Menu();

	public NPCCar npcCar; // creates npcCar object
	public Image roadImage; // loads the image of the road in
	public PlayerCar mainCar; // player car object (to be controlled by player)
	public Rectangle player; // the hitbox of the car images are janky so an invisible rectangle is drawn on top of them to handle collision detection
	public Rectangle npc; // 	"																											   "
    //Random random = new Random();

	public GamePanel() {

		roadImage = new ImageIcon("RoadDesign.png").getImage(); // assigns file path to the roadImage object

		mainCar = new PlayerCar(GAME_WIDTH / 2, GAME_HEIGHT / 2); // create a player controlled ball, set start location

		npcCar = new NPCCar(235, 0); // create a ball, set start location to top of
																	// screen and random x val

		this.setFocusable(true); // make everything in this class appear on the screen
		this.addKeyListener(this); // start listening for keyboard input

		this.setPreferredSize(new Dimension(GAME_WIDTH, GAME_HEIGHT));

		// make this class run at the same time as other classes (without this each
		// class would "pause" while another class runs). By using threading we can
		// remove lag, and also allows us to do features like display timers in real
		// time!
		gameThread = new Thread(this);
		gameThread.start();
	}

	// creates an enum for the game running condition
	public static enum GAMESTATE {
		MENU, GAME
	};

	// sets the menu variable to be true so game starts at main menu
	public static GAMESTATE GameState = GAMESTATE.MENU;

	public void paint(Graphics g) {

		g.drawImage(roadImage, 0, 0, GAME_WIDTH, GAME_HEIGHT, this);
		draw(g); // draws all game elements on top of the background

	}

	// updates positions as things move
	public void draw(Graphics g) {
		if (GameState == GAMESTATE.GAME) {
			mainCar.draw(g);
			npcCar.draw(g);
		}
		// displays the main menu
		else if (GameState == GAMESTATE.MENU) {
			mainMenu.render(g);
		}
	}

	// Updates positions
	public void move() {
		if (GameState == GAMESTATE.GAME) {
			mainCar.move();
			npcCar.move();
		}
	}

	// handles all collision detection and responds accordingly
	public void checkCollision() {

		 player = new Rectangle(mainCar.x, mainCar.y, PlayerCar.CAR_WIDTH, PlayerCar.CAR_HEIGHT);

		 npc = new Rectangle(npcCar.x, npcCar.y, PlayerCar.CAR_WIDTH, PlayerCar.CAR_HEIGHT);


		// force player to remain on screen
		if (mainCar.y <= 0) {
			mainCar.y = 0;
		}
		if (mainCar.y >= GAME_HEIGHT - PlayerCar.CAR_HEIGHT) {
			mainCar.y = GAME_HEIGHT - PlayerCar.CAR_HEIGHT;
		}
		if (mainCar.x <= 0) {
			mainCar.x = 0;
		}
		if (mainCar.x + PlayerCar.CAR_WIDTH >= GAME_WIDTH) {
			mainCar.x = GAME_WIDTH - PlayerCar.CAR_HEIGHT;
		}
		// force the falling object to go back to top and a random x value
		if (npcCar.y == GAME_HEIGHT) {
			npcCar.x = NPCCar.pickRandLane() ;
			npcCar.y = 0;
			npcCar.pickRandCar();
		}
		if (player.intersects(npc)) {
			npcCar.x = NPCCar.pickRandLane() ;
			npcCar.pickRandCar();
			npcCar.y = 0;
		}
	}

	// run() method is what makes the game continue running without end. It calls
	// other methods to move objects, check for collision, and update the screen
	public void run() {
		// the CPU runs our game code too quickly - we need to slow it down! The
		// following lines of code "force" the computer to get stuck in a loop for short
		// intervals between calling other methods to update the screen.
		long lastTime = System.nanoTime();
		double amountOfTicks = 60;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long now;

		while (true) { // this is the infinite game loop
			now = System.nanoTime();
			delta = delta + (now - lastTime) / ns;
			lastTime = now;

			// only move objects around and update screen if enough time has passed
			if (delta >= 1) {
				move();
				checkCollision();
				repaint();
				delta--;
			}
		}
	}

	// if a key is pressed, we'll send it over to the PlayerBall class for
	// processing
	public void keyPressed(KeyEvent e) {
		// sends keyboard input on the main menu to the main menu class
		if (GameState == GAMESTATE.MENU) {
			mainMenu.keyPressed(e);
		}
		mainCar.keyPressed(e);
	}

	//if a key is released, we'll sends it over to the other classs for processing
	public void keyReleased(KeyEvent e) {
		// sends keyboard input on the main menu to the main menu class
		if (GameState == GAMESTATE.MENU) {
			mainMenu.keyReleased(e);
		}
		mainCar.keyReleased(e);
	}

	// left empty because we don't need it; must be here because it is required to be overrided by the KeyListener interface
	public void keyTyped(KeyEvent e) {

	}
}
